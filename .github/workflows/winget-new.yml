name: Publish to Winget (initial/new)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.1 without v prefix)'
        required: true
        type: string

env:
  PACKAGE_ID: 'yuanjua.autowsl'
  PACKAGE_NAME: 'AutoWSL'
  PUBLISHER: 'yuanjua'
  SHORT_DESCRIPTION: 'Automatically install and configure WSL tools.'

jobs:
  winget-new:
    name: Create initial winget manifests (new)
    runs-on: windows-latest
    steps:
      - name: Get version
        id: get-version
        shell: pwsh
        run: |
          $version = "${{ inputs.version }}"
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "TAG_NAME=v$version" >> $env:GITHUB_OUTPUT
          Write-Host "Preparing initial submission for version: $version"

      - name: Download release assets
        shell: pwsh
        run: |
          $tag = "${{ steps.get-version.outputs.TAG_NAME }}"
          $baseUrl = "https://github.com/${{ github.repository }}/releases/download/$tag"

          $amd64Name = "autowsl-windows-amd64.exe"
          $arm64Name = "autowsl-windows-arm64.exe"

          $urls = @{
            $amd64Name = "$baseUrl/$amd64Name"
            $arm64Name = "$baseUrl/$arm64Name"
          }

          foreach ($name in $urls.Keys) {
            $url = $urls[$name]
            Write-Host "Downloading $name from $url"
            try {
              Invoke-WebRequest -Uri $url -OutFile $name -UseBasicParsing -ErrorAction Stop
            } catch {
              Write-Error "Failed to download $name. Ensure a release exists with tag $tag and the asset is uploaded & public."
              exit 1
            }
            $hash = (Get-FileHash $name -Algorithm SHA256).Hash
            Write-Host "$name SHA256: $hash"
          }

      - name: Install wingetcreate
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/wingetcreate/latest" -OutFile wingetcreate.exe -UseBasicParsing
          .\wingetcreate.exe --version

      - name: Run wingetcreate new (initial submission)
        shell: pwsh
        env:
          WINGET_TOKEN: ${{ secrets.WINGET_TOKEN }}
          PACKAGE_ID: ${{ env.PACKAGE_ID }}
          PACKAGE_NAME: ${{ env.PACKAGE_NAME }}
          PUBLISHER: ${{ env.PUBLISHER }}
          SHORT_DESCRIPTION: ${{ env.SHORT_DESCRIPTION }}
        run: |
          if (-not $env:WINGET_TOKEN) {
            Write-Error "WINGET_TOKEN secret is not set. Add a PAT as repository secret WINGET_TOKEN with rights to open PRs in winget-pkgs."
            exit 1
          }

          $version = "${{ steps.get-version.outputs.VERSION }}"
          $tag = "${{ steps.get-version.outputs.TAG_NAME }}"
          $packageId = $env:PACKAGE_ID

          $amd64Url = "https://github.com/${{ github.repository }}/releases/download/$tag/autowsl-windows-amd64.exe"
          $arm64Url = "https://github.com/${{ github.repository }}/releases/download/$tag/autowsl-windows-arm64.exe"

          Write-Host "Running wingetcreate new for $packageId version $version"
          & .\wingetcreate.exe new `
            --id $packageId `
            --name $env:PACKAGE_NAME `
            --publisher $env:PUBLISHER `
            --description $env:SHORT_DESCRIPTION `
            --urls $amd64Url $arm64Url `
            --version $version `
            --token $env:WINGET_TOKEN `
            --silent

          $exit = $LASTEXITCODE
          if ($exit -ne 0) {
            Write-Error "wingetcreate new failed with exit code $exit"
            exit $exit
          }
          Write-Host "âœ“ wingetcreate new succeeded. Review the PR in winget-pkgs."