# .github/workflows/winget-update.yml
name: Publish to Winget (update)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.1 without v prefix)'
        required: true
        type: string

env:
  PACKAGE_ID: 'yuanjua.autowsl'

jobs:
  winget-update:
    name: Update winget manifests (update)
    runs-on: windows-latest
    steps:
      - name: Get version
        id: get-version
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "release") {
            $version = "${{ github.event.release.tag_name }}" -replace '^v', ''
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $env:GITHUB_OUTPUT
          } else {
            $version = "${{ inputs.version }}"
            echo "VERSION=$version" >> $env:GITHUB_OUTPUT
            echo "TAG_NAME=v$version" >> $env:GITHUB_OUTPUT
          }
          Write-Host "Preparing update for version: $version"

      - name: Download release assets (with retries)
        shell: pwsh
        run: |
          $tag = "${{ steps.get-version.outputs.TAG_NAME }}"
          $baseUrl = "https://github.com/${{ github.repository }}/releases/download/$tag"

          $amd64Name = "autowsl-windows-amd64.exe"
          $arm64Name = "autowsl-windows-arm64.exe"

          function Download($url, $out) {
            try {
              Invoke-WebRequest -Uri $url -OutFile $out -UseBasicParsing -ErrorAction Stop
              return $true
            } catch {
              Write-Warning "Failed to download $out from $url: $($_.Exception.Message)"
              return $false
            }
          }

          $amd64Url = "$baseUrl/$amd64Name"
          $arm64Url = "$baseUrl/$arm64Name"

          if (-not (Download $amd64Url $amd64Name)) { exit 1 }
          if (-not (Download $arm64Url $arm64Name)) { exit 1 }

          foreach ($f in $amd64Name, $arm64Name) {
            $hash = (Get-FileHash $f -Algorithm SHA256).Hash
            Write-Host "$f SHA256: $hash"
          }

      - name: Install wingetcreate (tolerant of version-check failures)
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://aka.ms/wingetcreate/latest" -OutFile wingetcreate.exe -UseBasicParsing
          # Try to print version but don't fail the step if the CLI returns non-zero
          .\wingetcreate.exe --version 2>&1 | Tee-Object -FilePath wingetcreate-version.log
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "wingetcreate --version returned exit code $LASTEXITCODE; continuing anyway. See wingetcreate-version.log for details."
          } else {
            Write-Host "wingetcreate --version OK"
          }

      - name: Run wingetcreate update
        shell: pwsh
        env:
          WINGET_TOKEN: ${{ secrets.WINGET_TOKEN }}
          PACKAGE_ID: ${{ env.PACKAGE_ID }}
        run: |
          if (-not $env:WINGET_TOKEN) {
            Write-Error "WINGET_TOKEN secret is not set. Add a PAT as repository secret WINGET_TOKEN with rights to open PRs in winget-pkgs."
            exit 1
          }

          $version = "${{ steps.get-version.outputs.VERSION }}"
          $tag = "${{ steps.get-version.outputs.TAG_NAME }}"
          $packageId = $env:PACKAGE_ID

          $amd64Url = "https://github.com/${{ github.repository }}/releases/download/$tag/autowsl-windows-amd64.exe"
          $arm64Url = "https://github.com/${{ github.repository }}/releases/download/$tag/autowsl-windows-arm64.exe"

          Write-Host "Attempting wingetcreate update for $packageId version $version"
          & .\wingetcreate.exe update $packageId `
            --urls $amd64Url $arm64Url `
            --version $version `
            --submit `
            --token $env:WINGET_TOKEN 2>&1 | Tee-Object -FilePath wingetcreate-update.log
          $exit = $LASTEXITCODE
          $out = Get-Content wingetcreate-update.log -Raw
          Write-Host "wingetcreate update output:`n$out"
          if ($exit -ne 0) {
            Write-Error "wingetcreate update failed with exit code $exit; see wingetcreate-update.log"
            exit $exit
          }
          Write-Host "âœ“ wingetcreate update succeeded (PR created/updated)."